name: "$(SourceBranchName)+$(BuildID)"

trigger:
  branches:
    include:
      - tags/refs/v*
  tags:
    include:
      - v*

pr:
  branches:
    include: ['*']

pool:
  name: 'AWS-ECS'


stages:

  - stage: build
    displayName: Build and Test
    jobs:
      - job: build
        displayName: Build and Test
        timeoutInMinutes: 40

        pool:
          name: 'AWS-ECS'

        workspace:
          clean: all

        steps:
          - checkout: self

          - bash: |
              instance_id="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
              echo instance-id: "${instance_id}"
              echo connect to: https://eu-west-2.console.aws.amazon.com/systems-manager/session-manager/${instance_id}
              echo sudo su - ubuntu
              echo working directory: $(System.DefaultWorkingDirectory)
            displayName: Print AWS info

          - task: UsePythonVersion@0
            displayName: "Use Python 3.8"
            inputs:
              versionSpec: "3.8"

          - task: NodeTool@0
            displayName: "Use Node 13"
            inputs:
              versionSpec: '13.x'

          - bash: |
              node --version
              npm --version
            displayName: Versions

          - bash: |
              source ~/.nvm/nvm.sh
              node --version
              npm --version
              nvm --version
            displayName: Versions2

          - bash: |
              set -e
              nvm use --delete-prefix v14.21.1 --silent
              source ~/.nvm/nvm.sh
              nvm install-latest-npm
            displayName: Update npm

          - bash: |
              source ~/.nvm/nvm.sh
              node --version
              npm --version
              nvm --version
            displayName: Versions3  

          - task: s3-cache-action@1
            inputs:
              key: 'node | s3CacheTask/package-lock.json'
              location: 's3CacheTask/node_modules'
              pipelineIsolated: true
              debug: true
              alias: 'NodeModules'
              cacheHitVar: "StoreItHere"
            name: NodeModules
            displayName: cache node modules

          - bash: |
              echo "restored: $(NodeModules.cacheRestored)"
            displayName: print cacheRestored

          - bash: |
              echo "restored: $(StoreItHere)"
            displayName: print cacheHitVar

          - bash: |
              source ~/.nvm/nvm.sh
              make install-node
            condition: ne(variables['NodeModules.cacheRestored'], 'true')
            displayName: Install node dependencies

          - task: s3-cache-action@1
            inputs:
              key: 'python venv | ./poetry.lock'
              location: '.venv'
              pipelineIsolated: true
              debug: true
              alias: 'Poetry'
            name: Poetry
            displayName: cache virtual env

          - bash: |
              echo "restored: $(CacheRestored-Poetry)"
            displayName: print alias var

          - bash: make install-poetry
            condition: ne(variables['CacheRestored-Poetry'], 'true')
            displayName: Install poetry dependencies

          - bash: |
              make test
              exit_code=$?
              echo Exit code - ${exit_code}
              make down
              cd scripts
              export VIRTUAL_ENV_PATH="../.venv"
              sh check-python-venv-fixed.sh
              exit ${exit_code}
            displayName: Run s3 tests
